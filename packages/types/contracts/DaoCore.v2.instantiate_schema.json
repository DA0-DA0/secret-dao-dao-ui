{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "automatically_add_snip20s",
    "automatically_add_snip721s",
    "description",
    "name",
    "proposal_modules_instantiate_info",
    "snip20_code_hash",
    "snip721_code_hash",
    "voting_module_instantiate_info"
  ],
  "properties": {
    "admin": {
      "description": "Optional Admin with the ability to execute DAO messages directly. Useful for building SubDAOs controlled by a parent DAO. If no admin is specified the contract is set as its own admin so that the admin may be updated later by governance.",
      "type": ["string", "null"]
    },
    "automatically_add_snip20s": {
      "description": "If true the contract will automatically add received snip20 tokens to its treasury.",
      "type": "boolean"
    },
    "automatically_add_snip721s": {
      "description": "If true the contract will automatically add received snip721 tokens to its treasury.",
      "type": "boolean"
    },
    "dao_uri": {
      "description": "Implements the DAO Star standard: <https://daostar.one/EIP>",
      "type": ["string", "null"]
    },
    "description": {
      "description": "A description of the core contract.",
      "type": "string"
    },
    "image_url": {
      "description": "An image URL to describe the core module contract.",
      "type": ["string", "null"]
    },
    "initial_items": {
      "description": "The items to instantiate this DAO with. Items are arbitrary key-value pairs whose contents are controlled by governance.\n\nIt is an error to provide two items with the same key.",
      "type": ["array", "null"],
      "items": {
        "$ref": "#/definitions/InitialItem"
      }
    },
    "name": {
      "description": "The name of the core contract.",
      "type": "string"
    },
    "proposal_modules_instantiate_info": {
      "description": "Instantiate information for the core contract's proposal modules. NOTE: the pre-propose-base package depends on it being the case that the core module instantiates its proposal module.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModuleInstantiateInfo"
      }
    },
    "snip20_code_hash": {
      "type": "string"
    },
    "snip721_code_hash": {
      "type": "string"
    },
    "voting_module_instantiate_info": {
      "description": "Instantiate information for the core contract's voting power module.",
      "allOf": [
        {
          "$ref": "#/definitions/ModuleInstantiateInfo"
        }
      ]
    }
  },
  "definitions": {
    "Admin": {
      "description": "Information about the CosmWasm level admin of a contract. Used in conjunction with `ModuleInstantiateInfo` to instantiate modules.",
      "oneOf": [
        {
          "description": "Set the admin to a specified address.",
          "type": "object",
          "required": ["address"],
          "properties": {
            "address": {
              "type": "object",
              "required": ["addr"],
              "properties": {
                "addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets the admin as the core module address.",
          "type": "object",
          "required": ["core_module"],
          "properties": {
            "core_module": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": ["amount", "denom"],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "InitialItem": {
      "description": "Information about an item to be stored in the items list.",
      "type": "object",
      "required": ["key", "value"],
      "properties": {
        "key": {
          "description": "The name of the item.",
          "type": "string"
        },
        "value": {
          "description": "The value the item will have at instantiation time.",
          "type": "string"
        }
      }
    },
    "ModuleInstantiateInfo": {
      "description": "Information needed to instantiate a module.",
      "type": "object",
      "required": ["code_hash", "code_id", "funds", "label", "msg"],
      "properties": {
        "admin": {
          "description": "CosmWasm level admin of the instantiated contract. See: <https://docs.cosmwasm.com/docs/1.0/smart-contracts/migration>",
          "anyOf": [
            {
              "$ref": "#/definitions/Admin"
            },
            {
              "type": "null"
            }
          ]
        },
        "code_hash": {
          "description": "Code Hash of the contract to be instantiated.",
          "type": "string"
        },
        "code_id": {
          "description": "Code ID of the contract to be instantiated.",
          "type": "integer",
          "minimum": 0.0
        },
        "funds": {
          "description": "Funds to be sent to the instantiated contract.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "label": {
          "description": "Label for the instantiated contract.",
          "type": "string"
        },
        "msg": {
          "description": "Instantiate message to be used to create the contract.",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use secret_cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
