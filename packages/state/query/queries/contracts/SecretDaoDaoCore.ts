/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions } from '@tanstack/react-query'

import {
  Addr,
  AdminNominationResponse,
  ArrayOfAddr,
  ArrayOfProposalModule,
  ArrayOfSnip20BalanceResponse,
  ArrayOfSubDao,
  ArrayOfTupleOfStringAndString,
  Auth,
  Config,
  DaoURIResponse,
  DumpStateResponse,
  GetItemResponse,
  InfoResponse,
  PauseInfoResponse,
  ProposalModuleCountResponse,
  TotalPowerAtHeightResponse,
  VotingModuleInfo,
  VotingPowerAtHeightResponse,
} from '@dao-dao/types/contracts/SecretDaoDaoCore'
import { cosmWasmClientRouter } from '@dao-dao/utils'

import { SecretDaoDaoCoreQueryClient } from '../../../contracts/SecretDaoDaoCore'

export const secretDaoDaoCoreQueryKeys = {
  contract: [
    {
      contract: 'secretDaoDaoCore',
    },
  ] as const,
  address: (contractAddress: string) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.contract[0],
        address: contractAddress,
      },
    ] as const,
  admin: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'admin',
        args,
      },
    ] as const,
  adminNomination: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'admin_nomination',
        args,
      },
    ] as const,
  config: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  cw20Balances: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'cw20_balances',
        args,
      },
    ] as const,
  cw20TokenList: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'cw20_token_list',
        args,
      },
    ] as const,
  cw721TokenList: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'cw721_token_list',
        args,
      },
    ] as const,
  dumpState: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'dump_state',
        args,
      },
    ] as const,
  getItem: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'get_item',
        args,
      },
    ] as const,
  listItems: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'list_items',
        args,
      },
    ] as const,
  info: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'info',
        args,
      },
    ] as const,
  proposalModules: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'proposal_modules',
        args,
      },
    ] as const,
  activeProposalModules: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'active_proposal_modules',
        args,
      },
    ] as const,
  proposalModuleCount: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'proposal_module_count',
        args,
      },
    ] as const,
  pauseInfo: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'pause_info',
        args,
      },
    ] as const,
  votingModule: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'voting_module',
        args,
      },
    ] as const,
  listSubDaos: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'list_sub_daos',
        args,
      },
    ] as const,
  daoURI: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'dao_u_r_i',
        args,
      },
    ] as const,
  votingPowerAtHeight: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'voting_power_at_height',
        args,
      },
    ] as const,
  totalPowerAtHeight: (
    contractAddress: string,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...secretDaoDaoCoreQueryKeys.address(contractAddress)[0],
        method: 'total_power_at_height',
        args,
      },
    ] as const,
}
export const secretDaoDaoCoreQueries = {
  admin: <TData = Addr>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreAdminQuery<TData>): UseQueryOptions<
    Addr,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.admin(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).admin(),
    ...options,
  }),
  adminNomination: <TData = AdminNominationResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreAdminNominationQuery<TData>): UseQueryOptions<
    AdminNominationResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.adminNomination(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).adminNomination(),
    ...options,
  }),
  config: <TData = Config>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreConfigQuery<TData>): UseQueryOptions<
    Config,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.config(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).config(),
    ...options,
  }),
  cw20Balances: <TData = ArrayOfSnip20BalanceResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreCw20BalancesQuery<TData>): UseQueryOptions<
    ArrayOfSnip20BalanceResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.cw20Balances(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).cw20Balances({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  cw20TokenList: <TData = ArrayOfAddr>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreCw20TokenListQuery<TData>): UseQueryOptions<
    ArrayOfAddr,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.cw20TokenList(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).cw20TokenList({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  cw721TokenList: <TData = ArrayOfAddr>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreCw721TokenListQuery<TData>): UseQueryOptions<
    ArrayOfAddr,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.cw721TokenList(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).cw721TokenList({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  dumpState: <TData = DumpStateResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreDumpStateQuery<TData>): UseQueryOptions<
    DumpStateResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.dumpState(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).dumpState(),
    ...options,
  }),
  getItem: <TData = GetItemResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreGetItemQuery<TData>): UseQueryOptions<
    GetItemResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.getItem(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).getItem({
        key: args.key,
      }),
    ...options,
  }),
  listItems: <TData = ArrayOfTupleOfStringAndString>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreListItemsQuery<TData>): UseQueryOptions<
    ArrayOfTupleOfStringAndString,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.listItems(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).listItems({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  info: <TData = InfoResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreInfoQuery<TData>): UseQueryOptions<
    InfoResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.info(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).info(),
    ...options,
  }),
  proposalModules: <TData = ArrayOfProposalModule>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreProposalModulesQuery<TData>): UseQueryOptions<
    ArrayOfProposalModule,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.proposalModules(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).proposalModules({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  activeProposalModules: <TData = ArrayOfProposalModule>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreActiveProposalModulesQuery<TData>): UseQueryOptions<
    ArrayOfProposalModule,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.activeProposalModules(
      contractAddress,
      args
    ),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).activeProposalModules({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  proposalModuleCount: <TData = ProposalModuleCountResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreProposalModuleCountQuery<TData>): UseQueryOptions<
    ProposalModuleCountResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.proposalModuleCount(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).proposalModuleCount(),
    ...options,
  }),
  pauseInfo: <TData = PauseInfoResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCorePauseInfoQuery<TData>): UseQueryOptions<
    PauseInfoResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.pauseInfo(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).pauseInfo(),
    ...options,
  }),
  votingModule: <TData = VotingModuleInfo>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreVotingModuleQuery<TData>): UseQueryOptions<
    VotingModuleInfo,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.votingModule(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).votingModule(),
    ...options,
  }),
  listSubDaos: <TData = ArrayOfSubDao>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreListSubDaosQuery<TData>): UseQueryOptions<
    ArrayOfSubDao,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.listSubDaos(contractAddress, args),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).listSubDaos({
        limit: args.limit,
        startAfter: args.startAfter,
      }),
    ...options,
  }),
  daoURI: <TData = DaoURIResponse>({
    chainId,
    contractAddress,
    options,
  }: SecretDaoDaoCoreDaoURIQuery<TData>): UseQueryOptions<
    DaoURIResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.daoURI(contractAddress),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).daoURI(),
    ...options,
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreVotingPowerAtHeightQuery<TData>): UseQueryOptions<
    VotingPowerAtHeightResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.votingPowerAtHeight(
      contractAddress,
      args
    ),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).votingPowerAtHeight({
        auth: args.auth,
        height: args.height,
      }),
    ...options,
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse>({
    chainId,
    contractAddress,
    args,
    options,
  }: SecretDaoDaoCoreTotalPowerAtHeightQuery<TData>): UseQueryOptions<
    TotalPowerAtHeightResponse,
    Error,
    TData
  > => ({
    queryKey: secretDaoDaoCoreQueryKeys.totalPowerAtHeight(
      contractAddress,
      args
    ),
    queryFn: async () =>
      new SecretDaoDaoCoreQueryClient(
        await cosmWasmClientRouter.connect(chainId),
        contractAddress
      ).totalPowerAtHeight({
        height: args.height,
      }),
    ...options,
  }),
}
export interface SecretDaoDaoCoreReactQuery<TResponse, TData = TResponse> {
  chainId: string
  contractAddress: string
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  > & {
    initialData?: undefined
  }
}
export interface SecretDaoDaoCoreTotalPowerAtHeightQuery<TData>
  extends SecretDaoDaoCoreReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number
  }
}
export interface SecretDaoDaoCoreVotingPowerAtHeightQuery<TData>
  extends SecretDaoDaoCoreReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    auth: Auth
    height?: number
  }
}
export interface SecretDaoDaoCoreDaoURIQuery<TData>
  extends SecretDaoDaoCoreReactQuery<DaoURIResponse, TData> {}
export interface SecretDaoDaoCoreListSubDaosQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfSubDao, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreVotingModuleQuery<TData>
  extends SecretDaoDaoCoreReactQuery<VotingModuleInfo, TData> {}
export interface SecretDaoDaoCorePauseInfoQuery<TData>
  extends SecretDaoDaoCoreReactQuery<PauseInfoResponse, TData> {}
export interface SecretDaoDaoCoreProposalModuleCountQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ProposalModuleCountResponse, TData> {}
export interface SecretDaoDaoCoreActiveProposalModulesQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreProposalModulesQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreInfoQuery<TData>
  extends SecretDaoDaoCoreReactQuery<InfoResponse, TData> {}
export interface SecretDaoDaoCoreListItemsQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfTupleOfStringAndString, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreGetItemQuery<TData>
  extends SecretDaoDaoCoreReactQuery<GetItemResponse, TData> {
  args: {
    key: string
  }
}
export interface SecretDaoDaoCoreDumpStateQuery<TData>
  extends SecretDaoDaoCoreReactQuery<DumpStateResponse, TData> {}
export interface SecretDaoDaoCoreCw721TokenListQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreCw20TokenListQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreCw20BalancesQuery<TData>
  extends SecretDaoDaoCoreReactQuery<ArrayOfSnip20BalanceResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export interface SecretDaoDaoCoreConfigQuery<TData>
  extends SecretDaoDaoCoreReactQuery<Config, TData> {}
export interface SecretDaoDaoCoreAdminNominationQuery<TData>
  extends SecretDaoDaoCoreReactQuery<AdminNominationResponse, TData> {}
export interface SecretDaoDaoCoreAdminQuery<TData>
  extends SecretDaoDaoCoreReactQuery<Addr, TData> {}
